<?xml version="1.0" encoding="UTF-8"?>
<beans	xmlns="http://www.springframework.org/schema/beans"
    	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     	xmlns:tx="http://www.springframework.org/schema/tx"
    	xmlns:mvc="http://www.springframework.org/schema/mvc"
     	xmlns:context="http://www.springframework.org/schema/context"
    	xsi:schemaLocation="http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd
      	http://www.springframework.org/schema/tx 
      	http://www.springframework.org/schema/tx/spring-tx.xsd
      	http://www.springframework.org/schema/mvc 
      	http://www.springframework.org/schema/mvc/spring-mvc.xsd
      	http://www.springframework.org/schema/context 
      	http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Specifying base package of the Components like Controller, Service,DAO -->
    <context:component-scan base-package="com.property.buyer.*" />

    <!-- Getting Database properties -->
    <context:property-placeholder location="classpath:application.properties, classpath:database.properties, classpath:mailConfiguration.properties" />

    <!-- Importing Data source and Session Factory bean configuration files -->
    <import resource="DataSource.xml" />
    <import resource="Hibernate.xml" />

    <mvc:annotation-driven />

    <!-- Specifying the Resource location to load JS, CSS, Images etc -->
    <mvc:resources mapping="/static/**" location="/static/" />

    <!-- Creating a bean to get the properties file -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:application</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>

    <!-- View Resolver -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass">
            <value>
                org.springframework.web.servlet.view.tiles3.TilesView
            </value>
        </property>
    </bean>

    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles.xml</value>
            </list>
        </property>
    </bean>

    <!-- Mail -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <!-- SMTP settings -->
        <property name="host" value="${smtp.host}" />
        <property name="username" value="${smtp.username}" />
        <property name="password" value="${smtp.password}" />

        <property name="javaMailProperties">
            <!-- additional properties specific to JavaMail -->
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.socketFactory.port">${mail.smtp.socketFactory.port}</prop>
                <prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</prop>
                <prop key="mail.smtp.port">${mail.smtp.port}</prop>
            </props>
        </property>
    </bean>

    <!-- Transaction -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- Injects the liquibase properties for create the database schema -->
      <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
        <property name="dataSource" ref="dataSource" />
        <property name="changeLog" value="classpath:db-changelog-master.xml" />
        <property name="defaultSchema" value="real"></property>
        <property name="dropFirst" value="false"></property>
        <property name="changeLogParameters">
            <props>
                <prop key="databaseChangeLogLockTableName">RealDBChangeLogLock</prop>
                <prop key="databaseChangeLogTableName">RealDBChangeLog</prop>
            </props>
        </property>
        <property name="contexts" value="dev,production"></property>
    </bean>
    <!-- End injects the liquibase properties -->

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- setting maximum upload size -->
        <property name="maxUploadSize" value="20971520" />
        <!-- <property name="uploadTempDir" value="${upload.document}" /> -->
    </bean>

</beans>